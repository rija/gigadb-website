- debug: msg="{{ newuser }}"

- name: Add curator user
  ansible.builtin.user:
    name: "{{ newuser }}"
    shell: /bin/bash
    groups: centos
    append: yes

- name: Create a .ssh and uploadDir directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ newuser }}"
    group: "{{ newuser }}"
    mode: '0700'
  loop:
    - "/home/{{ newuser }}/.ssh"
    - "/home/{{ newuser }}/uploadDir"

- name: Create directory to store keys
  ansible.builtin.file:
    path: "/home/centos/{{ newuser }}.keys"
    state: directory
    owner: centos
    group: centos

- name: check if public key exists in GitLab CI environment variable
  ansible.builtin.uri:
    url: "{{ gitlab_url }}/variables/{{ newuser }}_bastion_public_key?filter%5benvironment_scope%5d={{ gigadb_environment }}"
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
    body_format: json
    status_code:
      - 200
      - 404
  register: public_key_in_gitlab

- name:
  debug:
    msg: "{{ public_key_in_gitlab.status }}"

- name: check if public key exists in bastion server
  ansible.builtin.stat:
    path: "/home/{{ newuser }}/.ssh/authorized_keys"
  register: public_key_in_bastion

- name:
  debug:
    msg: "{{ public_key_in_bastion.stat.exists }}"

- name: generate private/public key pair
  community.crypto.openssh_keypair:
    path: "/home/centos/{{ newuser }}.keys/id_ssh_rsa"
    owner: centos
  register: pk
  when: public_key_in_bastion.stat.exists == false and public_key_in_gitlab.status == 404

- name:
  debug:
    msg: "{{ pk }}"

- name: Add curator to sudoers
  ansible.builtin.lineinfile:
    path: "/etc/sudoers.d/91-add-{{ newuser }}"
    line: "{{ newuser }} ALL=(ALL)       NOPASSWD: /home/centos/datasetUpload.sh, /home/centos/postUpload.sh\n"
    owner: root
    group: root
    mode: 440
    create: yes

- name: Add public key to authorized keys
  ansible.builtin.copy:
    content: "{{ pk.public_key }}"
    dest: "/home/{{ newuser }}/.ssh/authorized_keys"
    owner: "{{ newuser }}"
    group: "{{ newuser }}"
    mode: g-rw,o-rw
  when: (public_key_in_bastion.stat.exists == false and public_key_in_gitlab.status == 404)

- name: save ssh public key to GitLab CI environment variable (first time)
  ansible.builtin.uri:
    url: "{{ gitlab_url }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
    body_format: json
    body:
      key: "{{ newuser }}_bastion_public_key"
      value: "{{ pk.public_key }} "
      environment_scope: "{{ gigadb_environment }}"
    status_code:
      - 201
      - 400
  register: save_pk_to_gitlab
  when: public_key_in_gitlab.status == 404

#- name:
#  debug:
#    msg: "{{ save_pk_to_gitlab.status }}"

#- name: get public key from GitLab CI environment variable to authorized keys
#  ansible.builtin.uri:
#    url: "{{ gitlab_url }}/variables/{{ newuser }}_bastion_public_key?filter%5benvironment_scope%5d={{ gigadb_environment }}"
#    method: GET
#    dest: "/home/{{ newuser }}/.ssh/authorized_keys"
#    owner: "{{ newuser }}"
#    group: "{{ newuser }}"
#    mode: g-rw,o-rw
#    headers:
#      PRIVATE-TOKEN: "{{ gitlab_private_token }}"
#    status_code:
#      - 200
#      - 400
#  register: get_pk_from_gitlab
#  when: (public_key_in_bastion.stat.exists == false and public_key_in_gitlab.status == 200)
#
#- name:
#  debug:
#    msg: "{{ get_pk_from_gitlab.status }}"
- name: get public key from GitLab CI environment variable to authorized keys
  shell: 'curl -s --header PRIVATE-TOKEN: "{{ gitlab_private_token }}" "{{ gitlab_url }}/variables/{{ newuser }}_bastion_public_key?filter%5benvironment_scope%5d={{ gigadb_environment }}" | jq -r .value'
  register: gitlab_pk_value
  when: (public_key_in_bastion.stat.exists == false and public_key_in_gitlab.status == 200)

- name:
  debug:
    msg: "{{ gitlab_pk_value }}"


- name: downloading the private key
  ansible.builtin.fetch:
    src: "/home/centos/{{ newuser }}.keys/id_ssh_rsa"
    dest: "output/privkeys-{{ inventory_hostname }}/{{ newuser }}"
    flat: yes
  when: pk.changed == true

- name: Restart systemd sshd service
  command: systemctl restart sshd.service
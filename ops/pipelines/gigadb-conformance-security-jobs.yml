check_SAST:
  stage: conformance and security
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
      --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
      --volume "$PWD:/code"
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]
  allow_failure: true
  when: manual

# job (manual, with failure allowed) for running Dymamic Application Security Testing
# See: https://docs.gitlab.com/ee/ci/examples/dast.html
check_DAST:
  stage: conformance and security
  image: registry.gitlab.com/gitlab-org/security-products/zaproxy
  variables:
    website: "https://gigadb-staging.pommetab.com/"
  before_script:
    - echo "About to run DAST"
  script:
    - mkdir /zap/wrk/
    - /zap/zap-baseline.py -J gl-dast-report.json -t $website || true
    - cp /zap/wrk/gl-dast-report.json .
  after_script:
    - echo "Finished running DAST"
  artifacts:
    reports:
      dast: gl-dast-report.json
  allow_failure: true
  when: manual


check_PSR2:
  stage: conformance and security
  artifacts:
    paths:
      - protected/runtime/phpcs-psr2-source.txt
      - protected/runtime/phpcs-psr2-summary.txt
      - protected/runtime/phpcs-psr2-full.txt
    when: always
    expire_in: 3 months
  script:
    # Load Base image
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - docker load -i php-7_1-fpm-stretch.tar
    - docker load -i php-7_2-fpm-stretch.tar
    - docker load -i alpine-latest.tar
    - docker load -i nginx-1_15-alpine.tar
    # login to gitlab container registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker-compose run --rm config
    - docker-compose run --rm gigadb
    - docker-compose run --rm test ops/scripts/check_codestyle.sh
  allow_failure: true
  when: manual

check_PHPDoc:
  stage: conformance and security
  artifacts:
    paths:
      - protected/runtime/phpcs-phpdoc-source.txt
      - protected/runtime/phpcs-phpdoc-summary.txt
      - protected/runtime/phpcs-phpdoc-full.txt
    when: always
    expire_in: 3 months
  script:
    # Load Base image
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - docker load -i php-7_1-fpm-stretch.tar
    - docker load -i php-7_2-fpm-stretch.tar
    - docker load -i alpine-latest.tar
    - docker load -i nginx-1_15-alpine.tar
    # login to gitlab container registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker-compose run --rm config
    - docker-compose run --rm gigadb
    - docker-compose run --rm test ops/scripts/check_phpdoc.sh
  allow_failure: true
  when: manual


.check_coverage:
  stage: conformance and security
  cache:
    key: coverage-cache
    paths:
      - previous_coverage_level.txt
  script:
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker-compose run --rm config
    - docker-compose run --rm gigadb
    - docker-compose run --rm test ./tests/coverage_check



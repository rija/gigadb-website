stages:
  - build for test
  - test
  - security
  - conformance
  - build for production
  - deployment
  - operation

image: docker:stable


variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
  DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  # the configuration script needs to know that we are not in DEV environment anymore
  # so it doesn't try to access
  GIGADB_ENV: CI
  # .env is only for dev, elsewhere we just list the variables here
  APPLICATION: "/builds/$CI_PROJECT_PATH"
  YII_PATH: "/var/www/vendor/yiisoft/yii"
  YII2_PATH: "/var/www/vendor/yiisoft/yii2"
  DATA_SAVE_PATH: "/builds/$CI_PROJECT_PATH/containers-data"
  NGINX_VERSION: "1.15.2"
  PHP_VERSION: "7.1"
  YII_VERSION: "1.1.20"
  YII2_VERSION: "2.0.15.1"
  POSTGRES_VERSION: "9.6"
  HOME_URL: "gigadb.gigasciencejournal.com"
  PUBLIC_HTTP_PORT: "9170"
  PUBLIC_HTTPS_PORT: "8043"
  COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml"
  COMPOSE_PROJECT_NAME: ${CI_PROJECT_NAME}
  COVERALLS_RUN_LOCALLY: "1"
  MAIN_BRANCH: "develop"
  GITLAB_PRIVATE_TOKEN: $CI_BUILD_TOKEN
  GITLAB_UPSTREAM_PROJECT_ID: "7041674"
  YII_ENV_DEV: "true"

services:
  - docker:19.03.5-dind

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/
    - bin/
    - composer.lock
    - fuw/app/vendor/
    - fuw/app/bin/
    - fuw/app/composer.lock
    - gigadb/app/worker/file-worker/vendor
    - gigadb/app/worker/file-worker/composer.lock
    - gigadb/app/client/web/node_modules

before_script:
  - env | grep "^CI_" > $APPLICATION/.ci_env
  - env | grep -v "^DOCKER" | grep -v "^CI"  | grep -v "^GITLAB" | grep -v "==" | grep -E "^[a-zA-Z0-9_]+=.+" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" > $APPLICATION/.env
  - env | grep -v "^DOCKER" | grep -v "^CI"  | grep -v "^GITLAB" | grep -v "==" | grep -E "^[a-zA-Z0-9_]+=.+" | grep -v "ANALYTICS_PRIVATE_KEY" | grep -viE "tlsauth" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" > $APPLICATION/.secrets
  - apk add --no-cache py-pip bash
  # Pin docker-compose version to stop installation error
  - pip install docker-compose~=1.23.0
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  # - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest
  # - docker pull registry.gitlab.com/$CI_PROJECT_PATH/console:latest
  # - cd $APPLICATION
  # - docker-compose run --rm config
  # - docker-compose run --rm fuw-config
  # - docker-compose run --rm test composer install
  # - docker-compose run --rm console bash -c "cd /app && composer install"

after_script:
  # - docker-compose ps
  # - docker-compose logs watcher
  # - docker-compose logs database
  # - docker-compose logs tusd
  # - docker-compose exec -T tusd ls -alrt /var/repo/
  # - docker-compose exec -T tusd ls -alrt /var/repo/000007/
  # - docker-compose exec -T web ls -alrt /etc/nginx/sites-enabled
  # - docker-compose exec -T web ls -alrt /etc/nginx/sites-available
  # - docker-compose logs fuw-admin
  # - docker-compose top
  # - docker-compose logs application
  # - docker-compose run --rm test  bash -c "pg_dump -h database -U gigadb -d gigadb > /var/www/tmp/gigadb_snapshot.sql"
  # - docker-compose run --rm test  bash -c "pg_dump -h database -U fuwdb -d fuwdb > /var/www/tmp/fuwdb_snapshot.sql"
  # - docker-compose run --rm test  bash -c "pg_dump -h database -U fuwdb -d fuwdb_test > /var/www/tmp/fuwdb_test_snapshot.sql"
  # - cat $APPLICATION/.env
  # - cat $APPLICATION/.secrets
  # - echo $DOCKER_HOST

test_build:
  stage: build for test
  script:
    - echo "Building app"
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/console:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/ftpd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/watcher:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/tusd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/beanstalkd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/web:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/js:latest || true
    - docker-compose build application
    - docker-compose build test
    - docker-compose build fuw-admin
    - docker-compose build fuw-worker
    - docker-compose build gigadb-worker
    - docker-compose build fuw-public
    - docker-compose build console
    - docker-compose build ftpd
    - docker-compose build watcher
    - docker-compose build tusd
    - docker-compose build beanstalkd
    - docker-compose build web
    - docker-compose build js
    - docker tag ${CI_PROJECT_NAME}_application:latest registry.gitlab.com/$CI_PROJECT_PATH/application:latest
    - docker tag ${CI_PROJECT_NAME}_test:latest registry.gitlab.com/$CI_PROJECT_PATH/test:latest
    - docker tag ${CI_PROJECT_NAME}_fuw-admin:latest registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest
    - docker tag ${CI_PROJECT_NAME}_fuw-worker:latest registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest
    - docker tag ${CI_PROJECT_NAME}_gigadb-worker:latest registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest
    - docker tag ${CI_PROJECT_NAME}_fuw-public:latest registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest
    - docker tag ${CI_PROJECT_NAME}_console:latest registry.gitlab.com/$CI_PROJECT_PATH/console:latest
    - docker tag ${CI_PROJECT_NAME}_ftpd:latest registry.gitlab.com/$CI_PROJECT_PATH/ftpd:latest
    - docker tag ${CI_PROJECT_NAME}_watcher:latest registry.gitlab.com/$CI_PROJECT_PATH/watcher:latest
    - docker tag ${CI_PROJECT_NAME}_tusd:latest registry.gitlab.com/$CI_PROJECT_PATH/tusd:latest
    - docker tag ${CI_PROJECT_NAME}_beanstalkd:latest registry.gitlab.com/$CI_PROJECT_PATH/beanstalkd:latest
    - docker tag ${CI_PROJECT_NAME}_web:latest registry.gitlab.com/$CI_PROJECT_PATH/web:latest
    - docker tag ${CI_PROJECT_NAME}_js:latest registry.gitlab.com/$CI_PROJECT_PATH/js:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/application:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/test:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/console:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/ftpd:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/watcher:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/tusd:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/beanstalkd:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/web:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/js:latest
    - docker-compose run --rm config
    - docker-compose run --rm fuw-config
    - docker-compose run --rm test composer update
    - docker-compose run --rm console bash -c "cd /app && composer update"
    - docker-compose run --rm console bash -c 'cd /gigadb-apps/worker/file-worker/ && composer update'
    - docker-compose run --rm js npm install
  artifacts:
    untracked: true
    when: on_failure
    expire_in: 1 week

test_run:
  stage: test
  artifacts:
    paths:
      - tmp/
      - protected/runtime/coverage/
      - protected/runtime/application.log
      - protected/runtime/phpunit-coverage.txt
      - protected/runtime/clover.xml
      - protected/config/main.php
      - protected/config/test.php
      - fuw/app/backend/runtime/
      - fuw/app/frontend/runtime/
      - fuw/app/console/runtime/
      - fuw/app/common/tests/_output
      - .env
      - composer.lock
      - containers-data
    when: always
    expire_in: 1 week
  script:
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/console:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/ftpd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/watcher:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/tusd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/beanstalkd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/web:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/js:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest || true
    # - env
    # generate config and css for gigadb webapp
    - docker-compose run --rm config
    - docker-compose run --rm less
    # generate config for File upload wizard webapp
    - docker-compose run --rm fuw-config
    # build the nginx container
    # - docker-compose build web
    # starting two webapps: gigadb website and File Upload Wizard Admin, then the web server
    - docker-compose up -d gigadb fuw
    - sleep 8
    - docker-compose up -d web
    - docker-compose exec -T web /usr/local/bin/enable_sites gigadb.dev.http fuw-backend.dev.http
    # - docker-compose exec -T application ./protected/yiic generatefiletypes
    # - docker-compose exec -T application ./protected/yiic generatefileformats
    # build the javascript app
    - docker-compose run --rm js
    # starting the Yii2 workers service and its dependent beanstalkd service after running required migrations
    - docker-compose exec -T console /app/yii migrate --interactive=0
    - docker-compose up -d fuw-worker gigadb-worker
    # starting the headless browser for acceptance testing
    - docker-compose up -d chrome
    # - docker-compose top
    # - docker network inspect rija-gigadb-website_web-tier
    # - docker network inspect rija-gigadb-website_db-tier
    # - docker-compose logs database
    # - docker images
    # - docker-compose ps
    # - docker-compose run --rm test ping -c 5 database
    # - docker-compose run --rm test ping -c 5 gigadb.dev
    # - docker-compose run test
    - chmod -R 777 $DATA_SAVE_PATH/fuw/incoming
    - chmod -R 777 $DATA_SAVE_PATH/fuw/repo
    - chmod -R 777 $DATA_SAVE_PATH/fuw/credentials
    - cd $APPLICATION
    - ./tests/all_and_coverage
    # - docker-compose run --rm application ./protected/yiic migrate --interactive=0
    # - docker-compose exec -T console /app/yii_test migrate --interactive=0
    # - docker-compose exec -T console /app/yii migrate --interactive=0
    # - docker-compose exec -T console /app/vendor/bin/codecept -vvv -c /app/common run -g metadata acceptance --fail-fast
    # - echo $?

check_coverage:
  stage: conformance
  cache:
    key: coverage-cache
    paths:
      - previous_coverage_level.txt
  script:
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker-compose run --rm config
    - docker-compose run --rm gigadb
    - docker-compose run --rm test ./tests/coverage_check
  dependencies:
    - test_run


check_PSR2:
  stage: conformance
  artifacts:
    paths:
      - protected/runtime/phpcs-psr2-source.txt
      - protected/runtime/phpcs-psr2-summary.txt
      - protected/runtime/phpcs-psr2-full.txt
    when: always
    expire_in: 3 months
  script:
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker-compose run --rm config
    - docker-compose run --rm gigadb
    - docker-compose run --rm test ops/scripts/check_codestyle.sh
  allow_failure: true
  when: manual

check_PHPDoc:
  stage: conformance
  artifacts:
    paths:
      - protected/runtime/phpcs-phpdoc-source.txt
      - protected/runtime/phpcs-phpdoc-summary.txt
      - protected/runtime/phpcs-phpdoc-full.txt
    when: always
    expire_in: 3 months
  script:
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/test:latest || true
    - docker-compose run --rm config
    - docker-compose run --rm gigadb
    - docker-compose run --rm test ops/scripts/check_phpdoc.sh
  allow_failure: true
  when: manual

check_SAST:
  stage: security
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]
  allow_failure: true
  when: manual

# job (manual, with failure allowed) for running Dymamic Application Security Testing
# See: https://docs.gitlab.com/ee/ci/examples/dast.html
check_DAST:
  image: registry.gitlab.com/gitlab-org/security-products/zaproxy
  variables:
    website: "https://gigadb-staging.pommetab.com/"
  before_script:
    - echo "About to run DAST"
  script:
    - mkdir /zap/wrk/
    - /zap/zap-baseline.py -J gl-dast-report.json -t $website || true
    - cp /zap/wrk/gl-dast-report.json .
  after_script:
    - echo "Finished running DAST"
  artifacts:
    reports:
      dast: gl-dast-report.json
  allow_failure: true
  when: manual

build:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_DOCKER_HOST: "$staging_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: build for production
  allow_failure: false
  script:
    # appending remote variables at the end of the .env and .secrets
    - env > full_env.txt
    - env | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # pulling the CI build of the application from registry and configure it for staging for the purpose of building production containers
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/application:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-admin:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-public:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/fuw-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/gigadb-worker:latest || true
    # Generate configuration files and vendors libraries before baking an immutable image
    - docker-compose run --rm config
    - docker-compose run --rm less
    - docker-compose run --rm fuw-config
    - docker-compose run --rm application composer install -a --no-dev
    - docker-compose run --rm console bash -c "cd /app && composer install -a --no-dev"
    - docker-compose run --rm console bash -c 'cd /gigadb-apps/worker/file-worker/ && composer install -a --no-dev'
    - cp files/data/fileformats.json fuw/app/
    - cp files/data/filetypes.json fuw/app/
    - cp gigadb/app/worker/file-worker/models/UpdateGigaDBJob.php fuw/app/
    # pulling production build of images from registry to use as cache
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_app:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_config:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-console:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-admin:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-public:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_gigadb-worker:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_ftpd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_watcher:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_tusd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_beanstalkd:latest || true
    - docker pull registry.gitlab.com/$CI_PROJECT_PATH/production_web:latest || true
    # build Nginx web container, making sure static assets are baked in
    - cp -R less js fonts css images ops/configuration/nginx-static/
    - cp -R fuw/app/proto ops/configuration/proto-conf/
    - cp -R fuw/app/backend ops/configuration/fuw-conf/
    - docker-compose build production_web
    # build the javascript app, so that the Vue.js app can be baked in production_app
    - docker-compose run --rm js
    # build and push production containers for PHP-FPM with application code and vendor code baked in and publish to registry
    - docker-compose build production_app
    - docker-compose build production_config
    - docker tag ${CI_PROJECT_NAME}_production_web:latest registry.gitlab.com/$CI_PROJECT_PATH/production_web:latest
    - docker tag ${CI_PROJECT_NAME}_production_app:latest registry.gitlab.com/$CI_PROJECT_PATH/production_app:latest
    - docker tag ${CI_PROJECT_NAME}_production_config:latest registry.gitlab.com/$CI_PROJECT_PATH/production_config:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_web:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_app:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_config:latest
    # build and push sidecar apps (ftpd, watcher, tusd, beanstalkd) for FUW
    - docker-compose build production_ftpd
    - docker-compose build production_watcher
    - docker-compose build production_tusd
    - docker-compose build production_beanstalkd
    - docker tag ${CI_PROJECT_NAME}_production_ftpd:latest registry.gitlab.com/$CI_PROJECT_PATH/production_ftpd:latest
    - docker tag ${CI_PROJECT_NAME}_production_watcher:latest registry.gitlab.com/$CI_PROJECT_PATH/production_watcher:latest
    - docker tag ${CI_PROJECT_NAME}_production_tusd:latest registry.gitlab.com/$CI_PROJECT_PATH/production_tusd:latest
    - docker tag ${CI_PROJECT_NAME}_production_beanstalkd:latest registry.gitlab.com/$CI_PROJECT_PATH/production_beanstalkd:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_ftpd:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_watcher:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_tusd:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_beanstalkd:latest
    # build and push production container images for File Upload Wizard apps
    - docker-compose build production_fuw-console
    - docker-compose build production_fuw-admin
    - docker-compose build production_fuw-public
    - docker-compose build production_fuw-worker
    - docker-compose build production_gigadb-worker
    - docker tag ${CI_PROJECT_NAME}_production_fuw-console:latest registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-console:latest
    - docker tag ${CI_PROJECT_NAME}_production_fuw-admin:latest registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-admin:latest
    - docker tag ${CI_PROJECT_NAME}_production_fuw-public:latest registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-public:latest
    - docker tag ${CI_PROJECT_NAME}_production_fuw-worker:latest registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-worker:latest
    - docker tag ${CI_PROJECT_NAME}_production_gigadb-worker:latest registry.gitlab.com/$CI_PROJECT_PATH/production_gigadb-worker:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-console:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-admin:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-public:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-worker:latest
    - docker push registry.gitlab.com/$CI_PROJECT_PATH/production_gigadb-worker:latest

  when: manual
  # only:
  #   - develop
  artifacts:
    untracked: true
    when: always
    expire_in: 1 week

deploy:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_DOCKER_HOST: "$staging_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: deployment
  allow_failure: false
  script:
    # appending staging variables at the end of the .env and .secrets
    - env | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_key' > ~/.docker/key.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_key' > ~/.docker/key.pem || true"
    # Pull production container from our private registry
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST info
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_web:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_app:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_config:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-console:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-admin:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-public:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_fuw-worker:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_gigadb-worker:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_watcher:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_tusd:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_ftpd:latest
    - docker --tlsverify -H=$REMOTE_DOCKER_HOST pull registry.gitlab.com/$CI_PROJECT_PATH/production_beanstalkd:latest
    # shutdown currently running container
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml down
    # verify config renders correctly after variables interpolation
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml config
    # Redeploy all containers but the web container
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml up -d fuw-admin fuw-public application
    # Run config script to populate the docker volumes
    # - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml run --rm config
    # - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml run --rm fuw-config
    # deploy the web container once the application servers are up
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml up -d web

    # Run database migrations if any
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml exec -T application ./protected/yiic migrate --interactive=0
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml exec -T console /app/yii migrate --interactive=0
    # post-install script to run
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml run --rm less
    # Generate the web certificate for TLS termination on web container.
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml run --rm config bash -c "cp /le.staging.ini /etc/letsencrypt/cli.ini && chmod 777 /var/www/assets"
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml run --rm config ls -alrt /etc/letsencrypt
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml run --rm certbot certonly -d $REMOTE_HOME_URL
    # symlink the https configuration for web container and reload nginx (cannot be done earlier as nginx will crash if it cannot see valid web certificates)
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml exec -T web /usr/local/bin/enable_sites gigadb.$GIGADB_ENV.https
    # FUW specific steps
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml up -d fuw-worker gigadb-worker
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml exec -T web /usr/local/bin/enable_sites fuw-backend.$GIGADB_ENV.http fuw-frontend.$GIGADB_ENV.http
  dependencies:
    - build
  environment:
    name: $DEPLOYMENT_ENV
    url: $REMOTE_HOME_URL
  when: manual
  # only:
  #   - develop
  artifacts:
    untracked: true
    paths:
      - fuw/app/console/config/
    when: always
    expire_in: 1 week

teardown:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_DOCKER_HOST: "$staging_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: operation
  script:
    # appending staging variables at the end of the .env and .secrets
    - env | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_key' > ~/.docker/key.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_key' > ~/.docker/key.pem || true"
    # FUW specific steps
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml down
  dependencies:
    - deploy
  environment:
    name: $DEPLOYMENT_ENV
    url: $REMOTE_HOME_URL
  when: manual
  # only:
  #   - develop
  artifacts:
    untracked: true
    paths:
      - fuw/app/console/config/
    when: always
    expire_in: 1 week

stop:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_DOCKER_HOST: "$staging_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: operation
  script:
    # appending staging variables at the end of the .env and .secrets
    - env | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_key' > ~/.docker/key.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_key' > ~/.docker/key.pem || true"
    # FUW specific steps
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml stop
  dependencies:
    - deploy
  environment:
    name: $DEPLOYMENT_ENV
    url: $REMOTE_HOME_URL
  when: manual
  # only:
  #   - develop
  artifacts:
    untracked: true
    paths:
      - fuw/app/console/config/
    when: always
    expire_in: 1 week

start:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_DOCKER_HOST: "$staging_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: operation
  script:
    # appending staging variables at the end of the .env and .secrets
    - env | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_key' > ~/.docker/key.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_key' > ~/.docker/key.pem || true"
    # FUW specific steps
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml up -d fuw-admin fuw-public application
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml up -d fuw-worker gigadb-worker
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml up -d web
  dependencies:
    - deploy
  environment:
    name: $DEPLOYMENT_ENV
    url: $REMOTE_HOME_URL
  when: manual
  # only:
  #   - develop
  artifacts:
    untracked: true
    paths:
      - fuw/app/console/config/
    when: always
    expire_in: 1 week


top:
  variables:
    GIGADB_ENV: $DEPLOYMENT_ENV
    COMPOSE_FILE: "ops/deployment/docker-compose.yml:ops/deployment/docker-compose.ci.yml:ops/deployment/docker-compose.build.yml"
    REMOTE_DOCKER_HOST: "$staging_public_ip:2376"
    DATA_SAVE_PATH: "/home/centos/app_data"
  stage: operation
  script:
    # appending staging variables at the end of the .env and .secrets
    - env | grep -iE "^(staging_|remote_)" | grep -viE "(password|email|tester|secret|key|user|app_id|client_id|token|tlsauth)" >> $APPLICATION/.env
    - env | grep -iE "^(staging_|remote_)" | grep -iE "(password|email|tester|secret|key|user|app_id|client_id|token)" | grep -viE "tlsauth">> $APPLICATION/.secrets
    # Steps below are for interacting with the remote staging server to deploy, configure and start the production containers using staging compose file
    # Create client certificate files for authenticating with remote docker daemon
    - mkdir -pv ~/.docker
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = staging ]] && echo '$staging_tlsauth_key' > ~/.docker/key.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_ca' >  ~/.docker/ca.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_cert' > ~/.docker/cert.pem || true"
    - bash -c "[[ $GIGADB_ENV = live ]] && echo '$live_tlsauth_key' > ~/.docker/key.pem || true"
    # FUW specific steps
    - docker-compose --tlsverify -H=$REMOTE_DOCKER_HOST -f ops/deployment/docker-compose.staging.yml top
  dependencies:
    - deploy
  environment:
    name: $DEPLOYMENT_ENV
    url: $REMOTE_HOME_URL
  when: manual
  # only:
  #   - develop
  artifacts:
    untracked: true
    paths:
      - fuw/app/console/config/
    when: always
    expire_in: 1 week